package cn.com.webxml;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * <a href="http://www.webxml.com.cn/" target="_blank">WebXml.com.cn</a> <strong>澶╂皵棰勬姤 Web 鏈嶅姟锛屾暟鎹瘡2.5灏忔椂宸﹀彸鑷姩鏇存柊涓�锛屽噯纭彲闈犮�鍖呮嫭 340 澶氫釜涓浗涓昏鍩庡競鍜�60 澶氫釜鍥藉涓昏鍩庡競涓夋棩鍐呯殑澶╂皵棰勬姤鏁版嵁銆�/br>姝ゅぉ姘旈鎶eb Services璇蜂笉瑕佺敤浜庝换浣曞晢涓氱洰鐨勶紝鑻ユ湁闇�璇�a href="http://www.webxml.com.cn/zh_cn/contact_us.aspx" target="_blank">鑱旂郴鎴戜滑</a>锛屾杩庢妧鏈氦娴併� QQ锛�409035<br />浣跨敤鏈珯 WEB 鏈嶅姟璇锋敞鏄庢垨閾炬帴鏈珯锛歨ttp://www.webxml.com.cn/ 鎰熻阿澶у鐨勬敮鎸�/strong>锛�br /><span style="color:#999999;">閫氱煡锛氬ぉ姘旈鎶�WEB 鏈嶅姟濡傚師鏉ヤ娇鐢ㄥ湴鍧�http://www.onhap.com/WebServices/WeatherWebService.asmx 鐨勶紝璇锋敼鎴愮幇鍦ㄤ娇鐢ㄧ殑鏈嶅姟鍦板潃 http://www.webxml.com.cn/WebServices/WeatherWebService.asmx 锛岄噸鏂板紩鐢ㄥ嵆鍙�</span><br /><br />&nbsp;
 *
 * This class was generated by Apache CXF 3.1.4
 * 2016-02-04T15:04:22.304+08:00
 * Generated source version: 3.1.4
 * 
 */
@WebServiceClient(name = "WeatherWebService", 
                  wsdlLocation = "http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl",
                  targetNamespace = "http://WebXml.com.cn/") 
public class WeatherWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://WebXml.com.cn/", "WeatherWebService");
    public final static QName WeatherWebServiceHttpPost = new QName("http://WebXml.com.cn/", "WeatherWebServiceHttpPost");
    public final static QName WeatherWebServiceHttpGet = new QName("http://WebXml.com.cn/", "WeatherWebServiceHttpGet");
    public final static QName WeatherWebServiceSoap = new QName("http://WebXml.com.cn/", "WeatherWebServiceSoap");
    public final static QName WeatherWebServiceSoap12 = new QName("http://WebXml.com.cn/", "WeatherWebServiceSoap12");
    static {
        URL url = null;
        try {
            url = new URL("http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WeatherWebService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public WeatherWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WeatherWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WeatherWebService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public WeatherWebService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public WeatherWebService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public WeatherWebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns WeatherWebServiceHttpPost
     */
    @WebEndpoint(name = "WeatherWebServiceHttpPost")
    public WeatherWebServiceHttpPost getWeatherWebServiceHttpPost() {
        return super.getPort(WeatherWebServiceHttpPost, WeatherWebServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherWebServiceHttpPost
     */
    @WebEndpoint(name = "WeatherWebServiceHttpPost")
    public WeatherWebServiceHttpPost getWeatherWebServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(WeatherWebServiceHttpPost, WeatherWebServiceHttpPost.class, features);
    }


    /**
     *
     * @return
     *     returns WeatherWebServiceHttpGet
     */
    @WebEndpoint(name = "WeatherWebServiceHttpGet")
    public WeatherWebServiceHttpGet getWeatherWebServiceHttpGet() {
        return super.getPort(WeatherWebServiceHttpGet, WeatherWebServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherWebServiceHttpGet
     */
    @WebEndpoint(name = "WeatherWebServiceHttpGet")
    public WeatherWebServiceHttpGet getWeatherWebServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(WeatherWebServiceHttpGet, WeatherWebServiceHttpGet.class, features);
    }


    /**
     *
     * @return
     *     returns WeatherWebServiceSoap
     */
    @WebEndpoint(name = "WeatherWebServiceSoap")
    public WeatherWebServiceSoap getWeatherWebServiceSoap() {
        return super.getPort(WeatherWebServiceSoap, WeatherWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherWebServiceSoap
     */
    @WebEndpoint(name = "WeatherWebServiceSoap")
    public WeatherWebServiceSoap getWeatherWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(WeatherWebServiceSoap, WeatherWebServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns WeatherWebServiceSoap
     */
    @WebEndpoint(name = "WeatherWebServiceSoap12")
    public WeatherWebServiceSoap getWeatherWebServiceSoap12() {
        return super.getPort(WeatherWebServiceSoap12, WeatherWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherWebServiceSoap
     */
    @WebEndpoint(name = "WeatherWebServiceSoap12")
    public WeatherWebServiceSoap getWeatherWebServiceSoap12(WebServiceFeature... features) {
        return super.getPort(WeatherWebServiceSoap12, WeatherWebServiceSoap.class, features);
    }

}
